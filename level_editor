import pygame
import button
import csv

pygame.init()

clock = pygame.time.Clock()
FPS = 60

#Tela jogo
largura_tela = 1000
altura_tela = 700
margem_inferior = 100
margem_lado = 300

tela = pygame.display.set_mode((largura_tela + margem_lado, altura_tela + margem_inferior))
pygame.display.set_caption('Level Editor')

#define variaveis do jogo
LINHAS = 16
MAX_COLUNAS = 150
TAM_BLOCO = altura_tela // LINHAS
TIP_BLOCO = 15
level = 0
current_tile = 0
scroll_left = False
scroll_right = False
scroll = 0 



#carrega imagens
img_textura = pygame.image.load('img/background/2304x1296.png').convert_alpha()
lista_img = []
for x in range(TIP_BLOCO):
    img = pygame.image.load(f'img/texturas/{x}.png').convert_alpha()
    img = pygame.transform.scale(img, (TAM_BLOCO, TAM_BLOCO))
    lista_img.append(img)

save_img = pygame.image.load('img/save_btn.png').convert_alpha()
load_img = pygame.image.load('img/load_btn.png').convert_alpha()


verde = (144,201,120)
white = (255,255,255)
vermelho = (200,25,25)

font = pygame.font.SysFont('Futura', 30)


#cria lista de bloco vazio
world_data = []

for row in range(LINHAS):
    r = [-1] * MAX_COLUNAS
    world_data.append(r)

#cria o chaõ
for tile in range(0, MAX_COLUNAS):
    world_data[LINHAS - 1][tile] = 0

#função para exibir texto na tela
def draw_text(text, font, text_col, x, y):
    img = font.render(text, True, text_col)
    tela.blit(img, (x, y))

#criar funcao para desenhar o bakcground
def draw_bg():
    tela.fill(verde)
    width = img_textura.get_width()
    for x in range(4):
        tela.blit(img_textura, ((x * width) - scroll * 0.5, largura_tela - img_textura.get_height()))
    
def draw_grid():
    #linhas verticais
    for c in range(MAX_COLUNAS + 1):
        pygame.draw.line(tela, white, (c * TAM_BLOCO - scroll, 0), (c * TAM_BLOCO - scroll, altura_tela))

    for c in range(MAX_COLUNAS + 1):
        pygame.draw.line(tela, white, (0, c * TAM_BLOCO), (largura_tela, c * TAM_BLOCO))

#funcao para desenhar os blocos do mundo
def draw_world():
    for y, row in enumerate(world_data):
        for x, tile in enumerate(row):
            if tile >= 0:
                tela.blit(lista_img[tile], (x * TAM_BLOCO - scroll, y * TAM_BLOCO))
#CRIAR BOTOES
save_button = button.Button(largura_tela // 2, altura_tela + margem_inferior - 50, save_img, 1)
load_button = button.Button(largura_tela // 2 + 200, altura_tela + margem_inferior - 50, load_img, 1)


button_list = []
button_col = 0
button_linha = 0
for i in range(len(lista_img)):
    tile_button = button.Button(largura_tela + (75 * button_col) + 50, 75 * button_linha + 50, lista_img[i], 1)
    button_list.append(tile_button)
    button_col += 1
    if button_col == 3:
        button_linha += 1
        button_col = 0

run = True
while run:
    clock.tick(FPS)
    draw_bg()
    draw_grid()
    draw_world()
    draw_text(f'Level: {level}', font, white, 10, altura_tela + margem_inferior - 90)
    draw_text(f'Press UP or Down to change level', font, white, 10, altura_tela + margem_inferior - 60)
#SALVA E CARREGA OS DADOS
    if save_button.draw(tela):
        #salva os dados do nivel
        with open(f'level{level}_data.csv', 'w', newline='') as csvfile:
            writer = csv.writer(csvfile, delimiter = ',')
            for row in world_data:
                writer.writerow(row)


    if load_button.draw(tela):
        #CARREGA O NIVEL 
        scroll = 0 
        with open(f'level{level}_data.csv', newline='') as csvfile:
            reader = csv.reader(csvfile, delimiter = ',')
            for x, row in enumerate(reader):
                for y, tile in enumerate(row):
                    world_data[x][y] = int(tile)
               


    pygame.draw.rect(tela, verde, (largura_tela, 0, margem_lado, largura_tela))
    
    #escolhe um bloco
    button_count = 0
    for button_count , i in enumerate(button_list):
        if i.draw(tela):
            current_tile = button_count
    
    pygame.draw.rect(tela, vermelho, button_list[current_tile].rect, 3)

    
    
    #scrolla o mapa
    if scroll_left == True and scroll > 0:
        scroll -= 5 * scroll_speed
    
    if scroll_right == True and scroll < (MAX_COLUNAS * TAM_BLOCO)- largura_tela:
        scroll += 5 * scroll_speed

#adiciona novos blocos para a tela
    pos = pygame.mouse.get_pos()
    x = (pos[0] + scroll) // TAM_BLOCO
    y = pos[1] // TAM_BLOCO

    if pos[0] < largura_tela and pos[1] < altura_tela:
        if pygame.mouse.get_pressed()[0] == 1:
            if world_data[y][x] != current_tile:
                world_data[y][x] = current_tile

        if pygame.mouse.get_pressed()[2] == 1:
            world_data[y][x] = -1
 

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP:
                level += 1
            if event.key == pygame.K_DOWN and level > 0:
                level -= 1
            if event.key == pygame.K_LEFT:
                scroll_left = True
            if event.key == pygame.K_RIGHT:
                scroll_right = True
            if event.key == pygame.K_RSHIFT:
                scroll_speed = 5
             

        
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT:
                scroll_left = False
            if event.key == pygame.K_RIGHT:
                scroll_right = False
            if event.key == pygame.K_RSHIFT:
                scroll_speed = 1

            



    pygame.display.update()
pygame.quit()